# Создайм новую матрицу, в которой каждая ячейка отражает количество возможных путей как до нее добраться.
# Заполняем ей, учитывая полученную карту с препятствиями.

from typing import List

def uniq_paths_with_obstacles(grid: List[List[int]]) -> int:
    """Сложность данной функции O(n**2)
    Args:
        grid (List[List[int]]): сетка, которую мы должны исследовать.
    Returns:
        int: Количество возможных уникальных путей
    """   
    matrix = [[1] * len(grid) for _ in range(len(grid))]    # создание матрицы, заполненной единицами, 
                                                            # таким же размером, как матрица, полученная функцией 

    for i in range(1, len(matrix)):         # Проход по всем ячейкам созданной матрицы
        for j in range(1, len(matrix)):
            if grid[i][j] + grid[i-1][j] + grid[i][j-1] == 0:       # Если к клетке полученной карты есть доступ и сверху и слева,
                matrix[i][j] = matrix[i-1][j] + matrix[i][j-1]      # а так же на клетке нет препятствия, то 
                                                                    # количество возможных путей как до нее добраться является суммой
                                                                    # количества возможных путей как добраться до ячейки выше неё                                                                                  
                                                                    # и количества возможных путей как добраться до ячейки слева 

            elif grid[i][j-1] + grid[i-1][j] == 2 or grid[i][j] == 1: # Если до клетки не добраться или на ней препятствие,
                matrix[i][j] = 0                                      # то в созданной матрице ставим 0
        
            elif grid[i-1][j] == 1:
                matrix[i][j] = matrix[i][j-1]
                                                    # Если ячейка выше или слева занята препятствием, то в резултатом является
                                                    # количество возможных путей как добраться до ячейки слева или выше соответственно 
            elif grid[i][j-1] == 1:
                matrix[i][j] = matrix[i-1][j]         

    return matrix[-1][-1]